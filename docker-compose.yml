version: "3.8"

services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"

  auth-service:
    build:
      context: .
      dockerfile: backend/services/auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      - postgres
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8081:8080"

  ai-service:
    build:
      context: .
      dockerfile: backend/services/ai-service/Dockerfile
    container_name: ai-service
    depends_on:
      - rabbitmq
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      AI_MODE: mock
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "8082:8080"

  main-service:
    build:
      context: .
      dockerfile: backend/services/main-service/Dockerfile
    container_name: main-service
    depends_on:
      - postgres
      - rabbitmq
      - auth-service
      - ai-service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: ${RABBITMQ_DEFAULT_PASS?} # (still 5672)
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8080:8080"

volumes:
  pgdata:
